[
  {
    "id": 1735386730350,
    "title": "The Joy of Coding",
    "content": "const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst app = express();\r\n\r\n// File path for storing posts\r\nconst postsFilePath = path.join(__dirname, 'posts.json');\r\n\r\n// App configurations\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(express.static('public'));\r\napp.set('view engine', 'ejs');\r\n\r\n// Function to read posts from file\r\nconst readPostsFromFile = () => {\r\n    try {\r\n        const data = fs.readFileSync(postsFilePath, 'utf8');\r\n        return JSON.parse(data);\r\n    } catch (error) {\r\n        return []; // Return an empty array if there's an error (like file doesn't exist yet)\r\n    }\r\n};\r\n\r\n// Function to write posts to file\r\nconst writePostsToFile = (posts) => {\r\n    try {\r\n        fs.writeFileSync(postsFilePath, JSON.stringify(posts, null, 2));\r\n    } catch (error) {\r\n        console.error('Error writing to file:', error);\r\n    }\r\n};\r\n\r\n// Routes\r\napp.get('/', (req, res) => {\r\n    const message = req.query.message; // Extract message from query string\r\n    const posts = readPostsFromFile(); // Read posts from file\r\n    res.render('home', { posts, message }); // Pass message and posts to the view\r\n});\r\n\r\napp.get('/create', (req, res) => {\r\n    res.render('create');\r\n});\r\n\r\napp.post('/create', (req, res) => {\r\n    const { title, content } = req.body;\r\n    const posts = readPostsFromFile(); // Read existing posts\r\n    const newPost = { id: Date.now(), title, content };\r\n    posts.push(newPost); // Add new post\r\n    writePostsToFile(posts); // Write updated posts to file\r\n    res.redirect('/?message=Post Created Successfully'); // Redirect with message\r\n});\r\n\r\napp.get('/edit/:id', (req, res) => {\r\n    const postId = parseInt(req.params.id);\r\n    const posts = readPostsFromFile();\r\n    const post = posts.find(post => post.id === postId);\r\n    res.render('edit', { post });\r\n});\r\n\r\napp.post('/edit/:id', (req, res) => {\r\n    const postId = parseInt(req.params.id);\r\n    const { title, content } = req.body;\r\n    const posts = readPostsFromFile();\r\n    const post = posts.find(post => post.id === postId);\r\n    if (post) {\r\n        post.title = title;\r\n        post.content = content;\r\n        writePostsToFile(posts); // Write updated posts to file\r\n        res.redirect('/?message=Post Updated Successfully');\r\n    } else {\r\n        res.redirect('/?message=Post Not Found');\r\n    }\r\n});\r\n\r\napp.post('/delete/:id', (req, res) => {\r\n    const postId = parseInt(req.params.id);\r\n    let posts = readPostsFromFile();\r\n    posts = posts.filter(post => post.id !== postId); // Remove the post\r\n    writePostsToFile(posts); // Write updated posts to file\r\n    res.redirect('/?message=Post Deleted Successfully');\r\n});\r\n\r\n// Start server\r\napp.listen(3000, () => {\r\n    console.log('Server is running on http://localhost:3000');\r\n});\r\n"
  },
  {
    "id": 1735460247120,
    "title": "The Wonders of Space Exploration",
    "content": "\r\nSpace exploration has always fascinated humankind. From landing on the moon to exploring Mars, every mission brings us closer to unraveling the mysteries of the universe. The future holds exciting possibilities with advancements in technology and interstellar travel."
  },
  {
    "id": 1735546912316,
    "title": "The Joy of Coding",
    "content": " Evolution of OS"
  },
  {
    "id": 1735548416242,
    "title": "The Importance of Mental Health in Today's World",
    "content": "const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst session = require('express-session');\r\n\r\nconst app = express();\r\n\r\n// File path for storing posts\r\nconst postsFilePath = path.join(__dirname, 'posts.json');\r\n\r\n// App configurations\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(express.static('public'));\r\napp.set('view engine', 'ejs');\r\n\r\n// Session configuration for flash messages\r\napp.use(\r\n    session({\r\n        secret: 'myblogsecret',\r\n        resave: false,\r\n        saveUninitialized: true,\r\n    })\r\n);\r\n\r\n// Middleware to set flash message for one request\r\napp.use((req, res, next) => {\r\n    res.locals.message = req.session.message || null;\r\n    delete req.session.message;\r\n    next();\r\n});\r\n\r\n// Function to read posts from file\r\nconst readPostsFromFile = () => {\r\n    try {\r\n        const data = fs.readFileSync(postsFilePath, 'utf8');\r\n        return JSON.parse(data);\r\n    } catch (error) {\r\n        return []; // Return an empty array if there's an error (like file doesn't exist yet)\r\n    }\r\n};\r\n\r\n// Function to write posts to file\r\nconst writePostsToFile = (posts) => {\r\n    try {\r\n        fs.writeFileSync(postsFilePath, JSON.stringify(posts, null, 2));\r\n    } catch (error) {\r\n        console.error('Error writing to file:', error);\r\n    }\r\n};\r\n\r\n// Routes\r\napp.get('/', (req, res) => {\r\n    res.redirect('/main');\r\n});\r\n\r\napp.get('/main', (req, res) => {\r\n    res.render('main');\r\n});\r\n\r\napp.get('/create', (req, res) => {\r\n    res.render('create');\r\n});\r\n\r\napp.post('/create', (req, res) => {\r\n    const { title, content } = req.body;\r\n    const posts = readPostsFromFile();\r\n    const newPost = { id: Date.now(), title, content };\r\n    posts.push(newPost);\r\n    writePostsToFile(posts);\r\n    req.session.message = 'Post Created Successfully!';\r\n    res.redirect('/');\r\n});\r\n\r\napp.get('/read/:id', (req, res) => {\r\n    const postId = parseInt(req.params.id);\r\n    const posts = readPostsFromFile();\r\n    const post = posts.find((post) => post.id === postId);\r\n    if (post) {\r\n        res.render('read', { post });\r\n    } else {\r\n        req.session.message = 'Post Not Found!';\r\n        res.redirect('/');\r\n    }\r\n});\r\n\r\napp.get('/edit/:id', (req, res) => {\r\n    const postId = parseInt(req.params.id);\r\n    const posts = readPostsFromFile();\r\n    const post = posts.find((post) => post.id === postId);\r\n    res.render('edit', { post });\r\n});\r\n\r\napp.post('/edit/:id', (req, res) => {\r\n    const postId = parseInt(req.params.id);\r\n    const { title, content } = req.body;\r\n    const posts = readPostsFromFile();\r\n    const post = posts.find((post) => post.id === postId);\r\n    if (post) {\r\n        post.title = title;\r\n        post.content = content;\r\n        writePostsToFile(posts);\r\n        req.session.message = 'Post Updated Successfully!';\r\n    } else {\r\n        req.session.message = 'Post Not Found!';\r\n    }\r\n    res.redirect('/');\r\n});\r\n\r\napp.post('/delete/:id', (req, res) => {\r\n    const postId = parseInt(req.params.id);\r\n    let posts = readPostsFromFile();\r\n    posts = posts.filter((post) => post.id !== postId);\r\n    writePostsToFile(posts);\r\n    req.session.message = 'Post Deleted Successfully!';\r\n    res.redirect('/');\r\n});\r\n\r\n// Start server\r\napp.listen(3000, () => {\r\n    console.log('Server is running on http://localhost:3000');\r\n});\r\n"
  }
]